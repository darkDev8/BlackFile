package org.black.file.tables.model;

import java.io.File;
import java.util.Collections;
import java.util.List;
import javax.swing.JLabel;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import org.black.file.dialogs.DlgException;
import org.black.file.root.Box;
import org.directorysystem.folders.DirectorySystem;
import org.externaltools.ExternalTools;
import org.filesystem.files.FileSystem;
import org.path.PathUtils;
import org.swing.ComponentIcon;
import org.swing.components.Table;

public class TableFolderContentModel extends DefaultTableModel {

    private String path;
    private boolean showHiddens;
    
//    public TableFolderContentModel(String path, boolean showHiddens) {
//        try {
//            if (DirectorySystem.exists(path)) {
//                List<File> folders = DirectorySystem.getDirectories(path, showHiddens),
//                        files = DirectorySystem.getFiles(path, showHiddens);
//
//                ComponentIcon ci = new ComponentIcon(20, 20);
//
//                addColumn("");
//                addColumn("Name");
//
//                if (folders.isEmpty() && files.isEmpty()) {
//                    JLabel label = new JLabel("The folder is empty.");
//                    label.setFont(Box.defaultFont);
//
//                    addRow(new Object[]{false, label});
//                } else {
//                    addColumn("Size");
//                    addColumn("Modify date");
//
//                    Collections.sort(folders);
//                    Collections.sort(files);
//
//                    for (File folder : folders) {
//                        JLabel label = new JLabel(PathUtils.getName(folder.getAbsolutePath()));
//                        label.setFont(Box.defaultFont);
//                        label.setIconTextGap(Box.ICON_TEXT_GAP);
//
//                        ci.setFromResource(label, Box.imageResourcePath + "folder.png");
//                        addRow(new Object[]{false, label, "Folder", DirectorySystem.getModifyDate(folder.getAbsolutePath())});
//                    }
//
//                    for (File file : files) {
//                        String filePath = file.getAbsolutePath();
//                        JLabel label = new JLabel(PathUtils.getName(file.getAbsolutePath()));
//
//                        label.setFont(Box.defaultFont);
//                        label.setIconTextGap(Box.ICON_TEXT_GAP);
//
//                        if (FileSystem.getFileType(file.getAbsolutePath(), false).equalsIgnoreCase("Audio file")) {
//                            ci.setFromResource(label, Box.imageResourcePath + "audio.png");
//                        } else if (FileSystem.getFileType(file.getAbsolutePath(), false).equalsIgnoreCase("Image file")) {
//                            ci.setFromResource(label, Box.imageResourcePath + "picture.png");
//                        } else if (FileSystem.getFileType(file.getAbsolutePath(), false).equalsIgnoreCase("Video file")) {
//                            ci.setFromResource(label, Box.imageResourcePath + "video2.png");
//                        } else if (FileSystem.getFileType(file.getAbsolutePath(), false).equalsIgnoreCase("Plain text file")) {
//                            ci.setFromResource(label, Box.imageResourcePath + "notepad.png");
//                        } else if (FileSystem.getFileType(file.getAbsolutePath(), false).equalsIgnoreCase("Windows executable file")) {
//                            ci.setFromResource(label, Box.imageResourcePath + "windows.png");
//                        } else if (FileSystem.getFileType(file.getAbsolutePath(), false).equalsIgnoreCase("Linux executable file(script)")) {
//                            ci.setFromResource(label, Box.imageResourcePath + "linux.png");
//                        } else if (FileSystem.getFileType(file.getAbsolutePath(), false).equalsIgnoreCase("Mac application")) {
//                            ci.setFromResource(label, Box.imageResourcePath + "mac.png");
//                        } else if (FileSystem.getFileType(file.getAbsolutePath(), false).equalsIgnoreCase("Archive file")) {
//                            ci.setFromResource(label, Box.imageResourcePath + "archive.png");
//                        } else if (FileSystem.getFileType(file.getAbsolutePath(), false).equalsIgnoreCase("Document file")) {
//                            ci.setFromResource(label, Box.imageResourcePath + "document.png");
//                        } else if (FileSystem.getFileType(file.getAbsolutePath(), false).equalsIgnoreCase("Font file")) {
//                            ci.setFromResource(label, Box.imageResourcePath + "font.png");
//                        } else if (FileSystem.getFileType(file.getAbsolutePath(), false).equalsIgnoreCase("Java source file")) {
//                            ci.setFromResource(label, Box.imageResourcePath + "java.png");
//                        } else if (FileSystem.getFileType(file.getAbsolutePath(), false).equalsIgnoreCase("cSharp source file")) {
//                            ci.setFromResource(label, Box.imageResourcePath + "c#.png");
//                        } else if (FileSystem.getFileType(file.getAbsolutePath(), false).equalsIgnoreCase("C source file")) {
//                            ci.setFromResource(label, Box.imageResourcePath + "c.png");
//                        } else if (FileSystem.getFileType(file.getAbsolutePath(), false).equalsIgnoreCase("C++ source file")) {
//                            ci.setFromResource(label, Box.imageResourcePath + "c++.png");
//                        } else if (FileSystem.getFileType(file.getAbsolutePath(), false).equalsIgnoreCase("Python source file")) {
//                            ci.setFromResource(label, Box.imageResourcePath + "python.png");
//                        } else if (FileSystem.getFileType(file.getAbsolutePath(), false).equalsIgnoreCase("Javascript source file")) {
//                            ci.setFromResource(label, Box.imageResourcePath + "javascript.png");
//                        } else if (FileSystem.getFileType(file.getAbsolutePath(), false).equalsIgnoreCase("Php source file")) {
//                            ci.setFromResource(label, Box.imageResourcePath + "php.png");
//                        } else if (FileSystem.getFileType(file.getAbsolutePath(), false).equalsIgnoreCase("Golang source file")) {
//                            ci.setFromResource(label, Box.imageResourcePath + "golang.png");
//                        } else if (FileSystem.getFileType(file.getAbsolutePath(), false).equalsIgnoreCase("Ruby source file")) {
//                            ci.setFromResource(label, Box.imageResourcePath + "ruby.png");
//                        } else if (FileSystem.getFileType(file.getAbsolutePath(), false).equalsIgnoreCase("C header file")) {
//                            ci.setFromResource(label, Box.imageResourcePath + "c.png");
//                        } else if (FileSystem.getFileType(file.getAbsolutePath(), false).equalsIgnoreCase("C++ header file")) {
//                            ci.setFromResource(label, Box.imageResourcePath + "c.png");
//                        } else if (FileSystem.getFileType(file.getAbsolutePath(), false).equalsIgnoreCase("Kotlin source file")) {
//                            ci.setFromResource(label, Box.imageResourcePath + "kotlin.png");
//                        } else {
//                            ci.setFromResource(label, Box.imageResourcePath + "unkown.png");
//                        }
//
//                        addRow(new Object[]{false, label, ExternalTools.toReadableSize(FileSystem.getSize(filePath)),
//                            FileSystem.getModifyDate(filePath)});
//                    }
//                }
//            } else {
//                Box.createMessageBox("Invalid path", "The path you are trying to access is no longer exists or the name has been changed.")
//                        .showError();
//            }
//        } catch (Exception e) {
//            new DlgException(e, false).setVisible(true);
//        }
//    }

    public TableFolderContentModel(String path, boolean showHiddens) {
        this.path = path;
        this.showHiddens = showHiddens;
    }
    

  

    @Override
    public Class<?> getColumnClass(int columnIndex) {
        switch (columnIndex) {
            case 0:
                return Boolean.class;
            case 1:
                return JLabel.class;
            case 2:
                return String.class;
            case 3:
                return String.class;
            default:
                return String.class;
        }
    }

}






    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(() -> {
            DlgRename dialog = new DlgRename(new javax.swing.JFrame(), true);
            dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                @Override
                public void windowClosing(java.awt.event.WindowEvent e) {
                    System.exit(0);
                }
            });
            dialog.setVisible(true);
        });
    }










                 button.addMouseListener(new MouseAdapter() {
                        @Override
                        public void mouseEntered(java.awt.event.MouseEvent evt) {
                            button.setBackground(buttonsHoverEffectColor);
                        }

                        @Override
                        public void mouseExited(java.awt.event.MouseEvent evt) {
                            button.setBackground(defaultButtonsBackgroundColor);
                        }
                    });








           Preferences prefs = Preferences.userNodeForPackage(Settings.class);
            Map<String, String> settings = new HashMap<>() {
                {
                    put("searchWholeWord", "false");
                    put("searchCaseSensitive", "false");
                    put("searchType", "file");
                    put("columnSize", "true");
                    put("columnModifyDate", "true");
                    put("colunCanRead", "true");
                    put("columnCanWrite", "true");
                    put("showHiddenFiles", "false");
                    put("showTableGrids", "true");
                }
            };
            
            for (var entry : settings.entrySet()) {
                String value = prefs.get(entry.getKey(), null);
                
                if (Strings.isNullOrEmpty(value)) {
                    Box.variables.put(entry.getKey(), entry.getValue());
                    prefs.put(entry.getKey(), entry.getValue());
                } else {
                    Box.variables.put(entry.getKey(), value);
                }
            }







                Iterator<TableColumn> it = tableHeader.getColumnModel().getColumns().asIterator();
                while (it.hasNext()) {
                    String columnName = it.next().getIdentifier().toString().toLowerCase();
                    
                    System.out.println(columnName);
                    switch (columnName) {
                        case "size": {
                            tblFolderContent.getColumnModel().getColumn(2).setPreferredWidth(80);
                            tblFolderContent.getColumnModel().getColumn(2).setMaxWidth(80);
                            break;
                        }

                        case "modify date": {
                            tblFolderContent.getColumnModel().getColumn(3).setWidth(95);
                            tblFolderContent.getColumnModel().getColumn(3).setMaxWidth(95);
                            break;
                        }

                        case "read": {
                            tblFolderContent.getColumnModel().getColumn(4).setWidth(95);
                            tblFolderContent.getColumnModel().getColumn(4).setMaxWidth(95);
                            break;
                        }

                        case "write": {
                            tblFolderContent.getColumnModel().getColumn(5).setWidth(95);
                            tblFolderContent.getColumnModel().getColumn(5).setMaxWidth(95);
                            break;
                        }
                    }
                }





       UIManager.setLookAndFeel("com.formdev.flatlaf.intellijthemes.FlatGradiantoDeepOceanIJTheme");
                    SwingUtilities.updateComponentTreeUI(this);






        try {
                for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                    System.out.println(info.getClassName());
                }
            } catch (Exception ex) {
                ex.printStackTrace();
            }